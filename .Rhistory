getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
options(repos = structure(c(CRAN = "http://cran.rstudio.com/")))
##This is example codes for HTE assessment using machine learning algorithms.
##MS Title: Machine Learning Approaches to Evaluate Heterogeneous Treatment Effects in Randomized Controlled Trials: A Scoping Review.
##Lasso, Causal forest, Bayesian causal forest codes are created based on from their vignette
##Meta-learner R codes are shown based on codes in: Salditt M, et al. A Tutorial Introduction to Heterogeneous Treatment Effect Estimation with Meta-learners.(Adm Policy Ment Health. doi:10.1007/s10488-023-01303-9)
##The codes have the following steps
###Step 1: Install packages
###Step 2: Set parameters and data generation
###Step 3: Creating datasets
###Step 4: Run analysis (Lasso, Causal forest, Bayesian Causal forest)
###Step 5: Run analysis (Meta-learner)
###Step 6: Evaluation of the model performance (example code for calibration)
###Step 0: Basic information
Sys.time()
# Get detailed R session and system information
session_info <- sessionInfo()
system_info <- Sys.info()
# Combine the output
list(session_info = session_info, system_info = system_info)
###Step 1: Install packages
list.of.packages <- c( "dplyr","Hmisc", "FindIt", "dbarts", "grf", "rlearner", "tidyverse", "bcf", "ranger",
"BART", "tidytreatment", "dplyr", "tidybayes", "ggplot2", "lmtest", "sandwich", "gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE)
#library(devtools)
#install_github("xnie/rlearner")
#library(rlearner)
###Step 2: Set parameters and data generation
N<-10000
setseed<-123
nthread<-8
set.seed(setseed)
T=rbinom(N, 1, 0.5)
age=rnorm(N, 60, 10)
sbp=rnorm(N, 120, 15)
eGFR=rnorm(N, 60, 20)
eGFR <- pmin(pmax(eGFR, 10), 120)
statin=rbinom(N, 1, 0.43)
#scenario 1: linear relationship
beta1<-(0.05+0.06*statin+0.002*eGFR)
regY1<- 0.20+beta1*T+0.001*(eGFR-60)+0.05*statin+0.001*(age-60)+0.001*(sbp-120)
summary(regY1)
regY1 <- pmin(pmax(regY1, 0), 1)
Y1<- rbinom(N, 1, regY1)
#scenario 2: non-linear relationship
initial_beta2<-(0.05)
beta2 <- ifelse(eGFR < 45, initial_beta2 * (1+(45 - 60)/20)+0.1*statin,
ifelse(eGFR >= 45 & eGFR < 90, initial_beta2 * (1+(eGFR - 60)/20)+0.1*statin,
initial_beta2 * (1+(90 - 60)/20)+0.1*statin))
regY2<- 0.20+beta2*T+0.001*(eGFR-60)+0.05*statin+0.001*(age-60)+0.001*(sbp-120)
summary(regY2)
regY2 <- pmin(pmax(regY2, 0), 1)
Y2<- rbinom(N, 1, regY2)
###Step 3: Creating datasets
#scenario 1 (binary)
Y<-Y1
data_1<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 2 (binary)
Y<-Y2
data_2<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 1' (continuous)
Y<-regY1
data_3<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 2' (continuous)
Y<-regY2
data_4<- data.frame(age,  sbp,  eGFR, statin, T, Y)
###Step 4: Run analysis (Lasso, Causal forest, Bayesian Causal forest)
run_step4 <- function(dat0, suffix) {
##Ensure output directory exists
output_dir <- file.path("output", paste0("data", suffix))
##4-1. Lasso
set.seed(setseed)
dat1<-dat0
model_lasso <-FindIt(model.treat= Y ~ T, model.main= ~ age + sbp + eGFR + statin,
model.int= ~ age + sbp + eGFR + statin,
data = dat1, type="binary", treat.type="single", fit.glmnet=TRUE)
pred_lasso <- predict(model_lasso)
dat1_lasso=as.data.frame(pred_lasso$data)
dat1_lasso <- dat1_lasso[order(as.numeric(row.names(dat1_lasso))), ]
hte_lasso <- dat1_lasso$Treatment.effect
dat1$CATE<-hte_lasso
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_lasso<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_lasso_", suffix, ".png")), plot = fig_lasso)
##4-2. Causal forest
dat1<-dat0
dat1 <- dat1 %>%
mutate_at(vars(statin), ~ as.numeric(as.character(.)))
Y <-  (dat1$Y)
W <-  (dat1$T)
X0 <-  subset(dat1, select=-Y)
X1 <-  subset(X0, select=-T)
model_grf <- causal_forest(X1, Y, W,
honesty = TRUE,
tune.parameters="all",
seed = setseed,
num.threads = nthread)
hte_grf <- predict(model_grf)$predictions
dat1$CATE<-hte_grf
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_grf<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_grf_", suffix, ".png")), fig_grf)
##4-3. Bayesian Causal Forest
dat1<-dat0
dat1 <- dat1 %>%
mutate_at(vars(statin), ~ as.numeric(as.character(.)))
Y <-  (dat1$Y)
W <-  (dat1$T)
X0 <-  subset(dat1, select=-Y)
X1 <-  subset(X0, select=-T)
X2 <- as.matrix(X1)
model <- glm(W ~ age + sbp + eGFR + statin, family = binomial)
pi <- predict(model, type = "response")
model_bcf <- bcf(y             = Y,
z                = W,
x_control        = X2,
x_moderate       = X2,
pihat            = pi,
nburn            = 100, # nburn should be much larger, at least a few thousand
nsim             = 10,  # nsim should be much larger, at least a few thousand
save_tree_directory = 'log',
log_file = file.path("log", sprintf("bcf_log_%s.txt", format(Sys.time(), "%Y%m%d_%H%M%S"))),
random_seed = setseed,
n_threads = nthread)
dat1$CATE<-colMeans(model_bcf$tau)
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_bcf<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_bcf_", suffix, ".png")), fig_bcf)
library(gridExtra)
fit_all<- grid.arrange(fig_lasso+ ggtitle('Lasso'),
fig_grf+ ggtitle('Causal forest'),
fig_bcf+ ggtitle('Bayesian causal forest'),
ncol=2)
ggsave(filename = file.path(output_dir, paste0("fig_all_", suffix, ".png")), fit_all)
return(list(Lasso = fig_lasso))
return(list(GRF = fig_grf))
return(list(BCF = fig_bcf))
return(list(All = fit_all))
}
#Run the function for each dataset
dataset_names <- c("data_1", "data_2", "data_3", "data_4")
plots_list <- list()  # Initialize an empty list to store plots
#Loop through dataset names and call the analysis function
for (dataset_name in dataset_names) {
#Retrieve the dataset
dataset <- get(dataset_name)
#Extract the numeric suffix
suffix <- gsub("data_", "", dataset_name)
#Call the analysis function
plots <- run_step4(dataset, suffix)
#Assign each plot a name with the suffix and store in the list
for (plot_name in names(plots)) {
full_plot_name <- paste(plot_name, suffix, sep = "_")
plots_list[[full_plot_name]] <- plots[[plot_name]]
}
}
knitr::opts_chunk$set(echo = TRUE)
options(repos = structure(c(CRAN = "http://cran.rstudio.com/")))
##This is example codes for HTE assessment using machine learning algorithms.
##MS Title: Machine Learning Approaches to Evaluate Heterogeneous Treatment Effects in Randomized Controlled Trials: A Scoping Review.
##Lasso, Causal forest, Bayesian causal forest codes are created based on from their vignette
##Meta-learner R codes are shown based on codes in: Salditt M, et al. A Tutorial Introduction to Heterogeneous Treatment Effect Estimation with Meta-learners.(Adm Policy Ment Health. doi:10.1007/s10488-023-01303-9)
##The codes have the following steps
###Step 1: Install packages
###Step 2: Set parameters and data generation
###Step 3: Creating datasets
###Step 4: Run analysis (Lasso, Causal forest, Bayesian Causal forest)
###Step 5: Run analysis (Meta-learner)
###Step 6: Evaluation of the model performance (example code for calibration)
###Step 0: Basic information
Sys.time()
# Get detailed R session and system information
session_info <- sessionInfo()
system_info <- Sys.info()
# Combine the output
list(session_info = session_info, system_info = system_info)
###Step 1: Install packages
list.of.packages <- c( "dplyr","Hmisc", "FindIt", "dbarts", "grf", "rlearner", "tidyverse", "bcf", "ranger",
"BART", "tidytreatment", "dplyr", "tidybayes", "ggplot2", "lmtest", "sandwich", "gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE)
#library(devtools)
#install_github("xnie/rlearner")
#library(rlearner)
###Step 2: Set parameters and data generation
N<-10000
setseed<-123
nthread<-8
set.seed(setseed)
T=rbinom(N, 1, 0.5)
age=rnorm(N, 60, 10)
sbp=rnorm(N, 120, 15)
eGFR=rnorm(N, 60, 20)
eGFR <- pmin(pmax(eGFR, 10), 120)
statin=rbinom(N, 1, 0.43)
#scenario 1: linear relationship
beta1<-(0.05+0.06*statin+0.002*eGFR)
regY1<- 0.20+beta1*T+0.001*(eGFR-60)+0.05*statin+0.001*(age-60)+0.001*(sbp-120)
summary(regY1)
regY1 <- pmin(pmax(regY1, 0), 1)
Y1<- rbinom(N, 1, regY1)
#scenario 2: non-linear relationship
initial_beta2<-(0.05)
beta2 <- ifelse(eGFR < 45, initial_beta2 * (1+(45 - 60)/20)+0.1*statin,
ifelse(eGFR >= 45 & eGFR < 90, initial_beta2 * (1+(eGFR - 60)/20)+0.1*statin,
initial_beta2 * (1+(90 - 60)/20)+0.1*statin))
regY2<- 0.20+beta2*T+0.001*(eGFR-60)+0.05*statin+0.001*(age-60)+0.001*(sbp-120)
summary(regY2)
regY2 <- pmin(pmax(regY2, 0), 1)
Y2<- rbinom(N, 1, regY2)
###Step 3: Creating datasets
#scenario 1 (binary)
Y<-Y1
data_1<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 2 (binary)
Y<-Y2
data_2<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 1' (continuous)
Y<-regY1
data_3<- data.frame(age,  sbp,  eGFR, statin, T, Y)
#scenario 2' (continuous)
Y<-regY2
data_4<- data.frame(age,  sbp,  eGFR, statin, T, Y)
###Step 4: Run analysis (Lasso, Causal forest, Bayesian Causal forest)
run_step4 <- function(dat0, suffix) {
##Ensure output directory exists
output_dir <- file.path("output", paste0("data", suffix))
##4-1. Lasso
set.seed(setseed)
dat1<-dat0
model_lasso <-FindIt(model.treat= Y ~ T, model.main= ~ age + sbp + eGFR + statin,
model.int= ~ age + sbp + eGFR + statin,
data = dat1, type="binary", treat.type="single", fit.glmnet=TRUE)
pred_lasso <- predict(model_lasso)
dat1_lasso=as.data.frame(pred_lasso$data)
dat1_lasso <- dat1_lasso[order(as.numeric(row.names(dat1_lasso))), ]
hte_lasso <- dat1_lasso$Treatment.effect
dat1$CATE<-hte_lasso
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_lasso<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_lasso_", suffix, ".png")), plot = fig_lasso)
##4-2. Causal forest
dat1<-dat0
dat1 <- dat1 %>%
mutate_at(vars(statin), ~ as.numeric(as.character(.)))
Y <-  (dat1$Y)
W <-  (dat1$T)
X0 <-  subset(dat1, select=-Y)
X1 <-  subset(X0, select=-T)
model_grf <- causal_forest(X1, Y, W,
honesty = TRUE,
tune.parameters="all",
seed = setseed,
num.threads = nthread)
hte_grf <- predict(model_grf)$predictions
dat1$CATE<-hte_grf
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_grf<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_grf_", suffix, ".png")), fig_grf)
##4-3. Bayesian Causal Forest
dat1<-dat0
dat1 <- dat1 %>%
mutate_at(vars(statin), ~ as.numeric(as.character(.)))
Y <-  (dat1$Y)
W <-  (dat1$T)
X0 <-  subset(dat1, select=-Y)
X1 <-  subset(X0, select=-T)
X2 <- as.matrix(X1)
model <- glm(W ~ age + sbp + eGFR + statin, family = binomial)
pi <- predict(model, type = "response")
model_bcf <- bcf(y             = Y,
z                = W,
x_control        = X2,
x_moderate       = X2,
pihat            = pi,
nburn            = 100, # nburn should be much larger, at least a few thousand
nsim             = 10,  # nsim should be much larger, at least a few thousand
save_tree_directory = 'log',
log_file = file.path("log", sprintf("bcf_log_%s.txt", format(Sys.time(), "%Y%m%d_%H%M%S"))),
random_seed = setseed,
n_threads = nthread)
dat1$CATE<-colMeans(model_bcf$tau)
#Create the plot
dat1$statin <- factor(dat1$statin)
fig_bcf<- ggplot(dat1, aes(x = eGFR, y = CATE, color = statin)) +
geom_point() +  # Add points
scale_color_manual(values = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4))) +  # Set custom colors
theme_minimal() +  # Minimal theme
labs(x = "eGFR", y = "CATE", title = "")  # Add labels and title
ggsave(filename = file.path(output_dir, paste0("fig_bcf_", suffix, ".png")), fig_bcf)
library(gridExtra)
fit_all<- grid.arrange(fig_lasso+ ggtitle('Lasso'),
fig_grf+ ggtitle('Causal forest'),
fig_bcf+ ggtitle('Bayesian causal forest'),
ncol=2)
ggsave(filename = file.path(output_dir, paste0("fig_all_", suffix, ".png")), fit_all)
return(list(Lasso = fig_lasso))
return(list(GRF = fig_grf))
return(list(BCF = fig_bcf))
return(list(All = fit_all))
}
#Run the function for each dataset
dataset_names <- c("data_1", "data_2", "data_3", "data_4")
plots_list <- list()  # Initialize an empty list to store plots
#Loop through dataset names and call the analysis function
for (dataset_name in dataset_names) {
#Retrieve the dataset
dataset <- get(dataset_name)
#Extract the numeric suffix
suffix <- gsub("data_", "", dataset_name)
#Call the analysis function
plots <- run_step4(dataset, suffix)
#Assign each plot a name with the suffix and store in the list
for (plot_name in names(plots)) {
full_plot_name <- paste(plot_name, suffix, sep = "_")
plots_list[[full_plot_name]] <- plots[[plot_name]]
}
}
